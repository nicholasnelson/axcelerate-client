import { mkdirSync, writeFileSync } from "node:fs";
import path from "node:path";
import { Project } from "ts-morph";

const posixRel = (from: string, to: string) =>
	path.posix.normalize(path.relative(from, to).split(path.sep).join("/"));
const stripExt = (p: string) => p.replace(/\.ts$/i, "");

export async function generateResourcesAll(
	project: Project,
	opts?: {
		root?: string;
		resDir?: string;
		outFile?: string;
	},
) {
	const ROOT = opts?.root ?? path.resolve(process.cwd(), "src");
	const RES_DIR = opts?.resDir ?? path.join(ROOT, "resources");
	const OUT_FILE = opts?.outFile ?? path.join(RES_DIR, "_all.ts");

	// Exclude the _all.ts file. If it is loaded into the project before being generated
	// it won't be refreshed before being used to generate the types file
	project.addSourceFilesAtPaths([path.join(RES_DIR, "**/*.ts"), "!**/_*"]);

	const imports = new Set<string>();
	for (const sf of project.getSourceFiles()) {
		const filePath = sf.getFilePath();
		const base = path.basename(filePath);
		if (base === "_all.ts" || base === "_registry.ts" || base === "endpoint.ts")
			continue;

		const hasEndpoint = sf
			.getClasses()
			.some((cls) =>
				cls.getDecorators().some((d) => d.getName() === "endpoint"),
			);
		if (!hasEndpoint) continue;

		const rel = "./" + stripExt(posixRel(RES_DIR, filePath));
		imports.add(rel);
	}

	const lines = [
		"/* Auto-generated by scripts/gen-resources-all.ts. Do not edit. */",
		...[...imports].sort().map((p) => `import "${p}";`),
		"",
	];

	mkdirSync(RES_DIR, { recursive: true });
	writeFileSync(OUT_FILE, lines.join("\n"));
	console.log(`Wrote ${posixRel(process.cwd(), OUT_FILE)}`);
}
