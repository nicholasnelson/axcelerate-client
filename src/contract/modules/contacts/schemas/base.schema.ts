import { z } from "zod";

import {
	AUStateOrOVS,
	LUI,
	SACCCode,
	SACEStudentId,
	Sex,
	USI,
	Year,
} from "./primatives";

const RawContactResponse = z.object({
	CONTACTID: z.number().int().positive(),
	GIVENNAME: z.string(),
	SURNAME: z.string(),
	EMAILADDRESS: z.string(),

	SEX: Sex.nullable(),
	DOB: z
		.string()
		.regex(/^\d{4}-\d{2}-\d{2}$/)
		.nullable(),
	USI: z.string().nullable(),
	USI_VERIFIED: z.boolean(),
	USI_EXEMPTION: z.boolean(),
	TITLE: z.string().nullable(),
	MIDDLENAME: z.string().nullable(),
	PREFERREDNAME: z.string().nullable(),
	LUI: z.string().nullable(),
	TFN_RECORDED: z.boolean(),
	OPTIONALID: z.number().int().positive().nullable(),
	POSITION: z.string().nullable(),
	SECTION: z.string().nullable(),
	DIVISION: z.string().nullable(),
	ORGANISATION: z.string().nullable(),
	ORGID: z.string().nullable().optional(),
	ORGIDS: z.array(z.string()).optional(),

	// Postal
	BUILDINGNAME: z.string().nullable().optional(),
	UNITNO: z.string().nullable().optional(),
	STREETNO: z.string().nullable().optional(),
	STREETNAME: z.string().nullable().optional(),
	POBOX: z.string().nullable().optional(),
	ADDRESS1: z.string().nullable(),
	ADDRESS2: z.string().nullable(),
	CITY: z.string().nullable(),
	STATE: AUStateOrOVS.nullable(),
	POSTCODE: z.string().nullable(),
	COUNTRYID: SACCCode.optional(),
	COUNTRY: z.string().nullable(),

	// Residential
	SBUILDINGNAME: z.string().nullable().optional(),
	SUNITNO: z.string().nullable().optional(),
	SSTREETNO: z.string().nullable().optional(),
	SSTREETNAME: z.string().nullable().optional(),
	SPOBOX: z.string().nullable().optional(),
	SADDRESS1: z.string().nullable(),
	SADDRESS2: z.string().nullable(),
	SCITY: z.string().nullable(),
	SSTATE: AUStateOrOVS.nullable(),
	SPOSTCODE: z.string().nullable(),
	SCOUNTRYID: SACCCode.optional(),
	SCOUNTRY: z.string().nullable(),

	PHONE: z.string().nullable(),
	MOBILEPHONE: z.string().nullable(),
	WORKPHONE: z.string().nullable(),
	FAX: z.string().nullable(),

	COMMENT: z.string().nullable(),
	WEBSITE: z.string().nullable(),

	CITIZENSTATUSID: z.number().int(),
	CITIZENSTATUSNAME: z.string(),
	COUNTRYOFBIRTHID: SACCCode,
	COUNTRYOFBIRTHNAME: z.string(),
	CITYOFBIRTH: z.string().nullable(),
	COUNTRYOFCITIZENID: SACCCode,
	COUNTRYOFCITIZENNAME: z.string(),

	INDIGENOUSSTATUSID: z.number().int(),
	INDIGENOUSSTATUSNAME: z.string(),

	MAINLANGUAGEID: SACCCode,
	MAINLANGUAGENAME: z.string(),
	ENGLISHPROFICIENCYID: z.number().int(),
	ENGLISHASSISTANCEFLAG: z.boolean(),

	HIGHESTSCHOOLLEVELID: z.number().int(),
	HIGHESTSCHOOLLEVELYEAR: z.string().nullable(),
	CURRENTSCHOOLLEVEL: z.string().nullable(),
	ATSCHOOLFLAG: z.boolean(),
	ATSCHOOLNAME: z.string().nullable(),

	PRIOREDUCATIONIDS: z.array(z.number().int()),
	PRIOREDUCATIONNAMES: z.array(z.string()),

	DISABILITYFLAG: z.boolean(),
	DISABILITYTYPEIDS: z.array(z.number().int()),
	DISABILITYTYPENAMES: z.array(z.string()),

	LABOURFORCEID: z.number().int(),
	LABOURFORCENAME: z.string(),

	EMERGENCYCONTACT: z.string().nullable(),
	EMERGENCYCONTACTRELATION: z.string().nullable(),
	EMERGENCYCONTACTPHONE: z.string().nullable(),
	PARENTCONTACTID: z.number().int().nullable().optional(),

	ANZSCOCODE: z.string().nullable(),
	ANZSICCODE: z.string().nullable(),

	EMPLOYERCONTACTID: z.number().int().nullable(),
	PAYERCONTACTID: z.number().int().nullable(),
	SUPERVISORCONTACTID: z.number().int().nullable(),
	COACHCONTACTID: z.number().int().nullable(),
	AGENTCONTACTID: z.number().int().nullable(),

	SACESTUDENTID: SACEStudentId.nullable().optional(),

	CATEGORYIDS: z.array(z.number().int()).optional(),
	DOMAINIDS: z.array(z.number().int()).optional(),
});

export const ContactResponseSchema = RawContactResponse.transform((r) => ({
	contactId: r.CONTACTID,
	givenName: r.GIVENNAME,
	surname: r.SURNAME,
	emailAddress: r.EMAILADDRESS,
	sex: r.SEX,
	dob: r.DOB,
	usi: r.USI,
	usiVerified: r.USI_VERIFIED,
	usiExemption: r.USI_EXEMPTION,
	title: r.TITLE,
	middleName: r.MIDDLENAME,
	preferredName: r.PREFERREDNAME,
	lui: r.LUI,
	tfnRecorded: r.TFN_RECORDED,
	optionalId: r.OPTIONALID,
	position: r.POSITION,
	section: r.SECTION,
	division: r.DIVISION,
	organisation: r.ORGANISATION,
	orgId: r.ORGID ?? null,
	orgIds: r.ORGIDS ?? [],
	buildingName: r.BUILDINGNAME ?? null,
	unitNo: r.UNITNO ?? null,
	streetNo: r.STREETNO ?? null,
	streetName: r.STREETNAME ?? null,
	poBox: r.POBOX ?? null,
	address1: r.ADDRESS1,
	address2: r.ADDRESS2,
	city: r.CITY,
	state: r.STATE,
	postcode: r.POSTCODE,
	countryId: r.COUNTRYID ?? null,
	country: r.COUNTRY,
	sBuildingName: r.SBUILDINGNAME ?? null,
	sUnitNo: r.SUNITNO ?? null,
	sStreetNo: r.SSTREETNO ?? null,
	sStreetName: r.SSTREETNAME ?? null,
	sPoBox: r.SPOBOX ?? null,
	sAddress1: r.SADDRESS1,
	sAddress2: r.SADDRESS2,
	sCity: r.SCITY,
	sState: r.SSTATE,
	sPostcode: r.SPOSTCODE,
	sCountryId: r.SCOUNTRYID ?? null,
	sCountry: r.SCOUNTRY,
	phone: r.PHONE,
	mobilePhone: r.MOBILEPHONE,
	workPhone: r.WORKPHONE,
	fax: r.FAX,
	comment: r.COMMENT,
	website: r.WEBSITE,
	citizenStatusId: r.CITIZENSTATUSID,
	citizenStatusName: r.CITIZENSTATUSNAME,
	countryOfBirthId: r.COUNTRYOFBIRTHID,
	countryOfBirthName: r.COUNTRYOFBIRTHNAME,
	cityOfBirth: r.CITYOFBIRTH,
	countryOfCitizenId: r.COUNTRYOFCITIZENID,
	countryOfCitizenName: r.COUNTRYOFCITIZENNAME,
	indigenousStatusId: r.INDIGENOUSSTATUSID,
	indigenousStatusName: r.INDIGENOUSSTATUSNAME,
	mainLanguageId: r.MAINLANGUAGEID,
	mainLanguageName: r.MAINLANGUAGENAME,
	englishProficiencyId: r.ENGLISHPROFICIENCYID,
	englishAssistanceFlag: r.ENGLISHASSISTANCEFLAG,
	highestSchoolLevelId: r.HIGHESTSCHOOLLEVELID,
	highestSchoolLevelYear: r.HIGHESTSCHOOLLEVELYEAR,
	currentSchoolLevel: r.CURRENTSCHOOLLEVEL,
	atSchoolFlag: r.ATSCHOOLFLAG,
	atSchoolName: r.ATSCHOOLNAME,
	priorEducationIds: r.PRIOREDUCATIONIDS,
	priorEducationNames: r.PRIOREDUCATIONNAMES,
	disabilityFlag: r.DISABILITYFLAG,
	disabilityTypeIds: r.DISABILITYTYPEIDS,
	disabilityTypeNames: r.DISABILITYTYPENAMES,
	labourForceId: r.LABOURFORCEID,
	labourForceName: r.LABOURFORCENAME,
	emergencyContact: r.EMERGENCYCONTACT,
	emergencyContactRelation: r.EMERGENCYCONTACTRELATION,
	emergencyContactPhone: r.EMERGENCYCONTACTPHONE,
	parentContactId: r.PARENTCONTACTID ?? null,
	anzscoCode: r.ANZSCOCODE,
	anzsicCode: r.ANZSICCODE,
	employerContactId: r.EMPLOYERCONTACTID,
	payerContactId: r.PAYERCONTACTID,
	supervisorContactId: r.SUPERVISORCONTACTID,
	coachContactId: r.COACHCONTACTID,
	agentContactId: r.AGENTCONTACTID,
	saceStudentId: r.SACESTUDENTID ?? null,
	categoryIds: r.CATEGORYIDS ?? [],
	domainIds: r.DOMAINIDS ?? [],
}));

export const BaseContactBody = z.object({
	givenName: z.string().max(40),
	surname: z.string().max(40),
	title: z.string().optional(),
	emailAddress: z.string().email().optional(),
	ContactActive: z.boolean().optional(),
	dob: z
		.string()
		.regex(/^\d{4}-\d{2}-\d{2}$/)
		.optional(),
	sex: Sex.optional(),
	middleName: z.string().max(40).optional(),
	phone: z.string().optional(),
	mobilephone: z.string().optional(),
	workphone: z.string().optional(),
	fax: z.string().optional(),
	organisation: z.string().optional(),
	orgId: z.number().int().positive(),
	orgIds: z.array(z.number().int().positive()).max(5).optional(),
	position: z.string().optional(),
	section: z.string().optional(),
	division: z.string().optional(),
	SourceCodeID: z.number().int().positive().optional(),
	HistoricClientID: z.string().optional(),
	USI: USI.optional(),
	LUI: LUI.optional(),
	TFN: z.string().optional(),
	VSN: z.string().optional(),
	WorkReadyParticipantNumber: z.string().optional(),
	SACEStudentID: SACEStudentId.optional(),
	EmergencyContact: z.string().optional(),
	EmergencyContactRelation: z.string().optional(),
	EmergencyContactPhone: z.string().optional(),
	ParentContactID: z.number().int().positive().optional(),

	// Postal
	buildingName: z.string().optional(),
	unitNo: z.string().optional(),
	streetNo: z.string().optional(),
	streetName: z.string().optional(),
	POBox: z.string().optional(),
	address1: z.string().optional(),
	address2: z.string().optional(),
	city: z.string().optional(),
	state: AUStateOrOVS.optional(),
	postcode: z.string().optional(),
	countryID: SACCCode.optional(),
	country: z.string().optional(),

	// Residential
	sbuildingName: z.string().optional(),
	sunitNo: z.string().optional(),
	sstreetNo: z.string().optional(),
	sstreetName: z.string().optional(),
	sPOBox: z.string().optional(),
	saddress1: z.string().optional(),
	saddress2: z.string().optional(),
	scity: z.string().optional(),
	sstate: AUStateOrOVS.optional(),
	spostcode: z.string().optional(),
	scountryID: SACCCode.optional(),
	scountry: z.string().optional(),

	// Term
	termAddress1: z.string().optional(),
	termAddress2: z.string().optional(),
	termCity: z.string().optional(),
	termState: AUStateOrOVS.optional(),
	termPostcode: z.string().optional(),
	termCountryID: SACCCode.optional(),
	termCountry: z.string().optional(),

	// AVETMISS
	CountryofBirthID: SACCCode.optional(),
	CityofBirth: z.string().optional(),
	CountryofCitizenID: SACCCode.optional(),
	CitizenStatusID: z
		.union([
			z.literal(1),
			z.literal(2),
			z.literal(3),
			z.literal(4),
			z.literal(5),
			z.literal(6),
			z.literal(7),
			z.literal(8),
			z.literal(9),
			z.literal(10),
			z.literal(11),
		])
		.optional(),
	ResidencyStatusID: z.number().int().nonnegative().optional(),
	LabourForceID: z.number().int().nonnegative().optional(),
	MainLanguageID: SACCCode.optional(),
	EnglishProficiencyID: z.number().int().nonnegative().optional(),
	EnglishAssistanceFlag: z.boolean().optional(),
	HighestSchoolLevelID: z.number().int().nonnegative().optional(),
	HighestSchoolLevelYear: Year.optional(),
	AtSchoolFlag: z.boolean().optional(),
	AtSchoolName: z.string().optional(),
	PriorEducationStatus: z.boolean().optional(),

	PriorEducationTypeIDs: z.array(z.number().int().positive()).optional(),
	PriorEducationTypeOther: z.string().optional(),

	DisabilityFlag: z.boolean().optional(),
	DisabilityTypeIDs: z.array(z.number().int().positive()).optional(),
	DisabilityTypeOther: z.string().optional(),

	VolunteerFlag: z.boolean().optional(),
	AVETMISSStatusID: z.number().int().nonnegative().optional(),
	ContactTypeID: z.number().int().positive().optional(),

	checkEmailAddressUnique: z.boolean().optional(),
});

export const ContactIdPathParam = z.object({
	contactId: z.number().int().positive(),
});
